# Generated by Django 5.1.6 on 2025-08-05 09:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cap', models.CharField(max_length=10)),
                ('comune', models.CharField(max_length=50)),
                ('provincia', models.CharField(max_length=2)),
            ],
            options={
                'verbose_name_plural': 'Comuni',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50)),
                ('link_social', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Utente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tipologiautente', models.CharField(choices=[('lettore', 'Lettore'), ('autore', 'Autore')], default='lettore', max_length=20)),
                ('immagine', models.ImageField(blank=True, default='iconadefault.jpg', null=True, upload_to='profile_pics/')),
                ('inprovincia', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('comune', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='libreria.comune')),
                ('links', models.ManyToManyField(blank=True, to='libreria.link')),
                ('tags', models.ManyToManyField(to='libreria.tag')),
            ],
            options={
                'verbose_name_plural': 'Utenti',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Autore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('biografia', models.TextField(blank=True, null=True)),
                ('utente_collegato', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Autori',
            },
        ),
        migrations.CreateModel(
            name='Libro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titolo', models.CharField(max_length=100)),
                ('trama', models.TextField(blank=True, null=True)),
                ('numerovoti', models.IntegerField(default=0)),
                ('mediavoti', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('autori', models.ManyToManyField(to='libreria.autore')),
                ('tags', models.ManyToManyField(to='libreria.tag')),
            ],
            options={
                'verbose_name_plural': 'Libri',
            },
        ),
        migrations.CreateModel(
            name='Luogo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('via', models.CharField(max_length=50)),
                ('comune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='libreria.comune')),
            ],
            options={
                'verbose_name_plural': 'Luoghi',
                'unique_together': {('via', 'comune')},
            },
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('descrizione', models.TextField(blank=True, null=True)),
                ('autore', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('idlibro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='libreria.libro')),
                ('luogo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='libreria.luogo')),
            ],
            options={
                'verbose_name_plural': 'Eventi',
            },
        ),
        migrations.CreateModel(
            name='Nota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messaggio', models.TextField()),
                ('idlibro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='libreria.libro')),
                ('nomeutente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Note',
            },
        ),
        migrations.CreateModel(
            name='Recensione',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voto', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('commento', models.TextField(blank=True, null=True)),
                ('data_aggiunta', models.DateTimeField(auto_now_add=True)),
                ('idlibro', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='libreria.libro')),
                ('nomeutente', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Recensioni',
            },
        ),
        migrations.CreateModel(
            name='ListaDesideri',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_aggiunta', models.DateTimeField(auto_now_add=True)),
                ('idlibro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='libreria.libro')),
                ('nomeutente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'ListeDesideri',
                'unique_together': {('idlibro', 'nomeutente')},
            },
        ),
        migrations.CreateModel(
            name='ListaScambio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idlibro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='libreria.libro')),
                ('nomeutente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'ListeScambio',
                'unique_together': {('idlibro', 'nomeutente')},
            },
        ),
    ]
